#include <iostream>
#include <queue>
using namespace std;

class BTreeNode {
public:
    int *keys;     // Array of keys
    int t;         // Minimum degree (defines range for number of keys)
    BTreeNode **C; // Array of child pointers
    int n;         // Current number of keys
    bool leaf;     // True if leaf node

    BTreeNode(int _t, bool _leaf);
    void insertNonFull(int k);
    void splitChild(int i, BTreeNode *y);
    void traverseLevelOrder();
    void remove(int k);
    int findKey(int k);
    void removeFromLeaf(int idx);
    void removeFromNonLeaf(int idx);
    int getPred(int idx);
    int getSucc(int idx);
    void fill(int idx);
    void borrowFromPrev(int idx);
    void borrowFromNext(int idx);
    void merge(int idx);
    friend class BTree;
};

class BTree {
public:
    BTreeNode *root;
    int t;

    BTree(int _t) {
        root = nullptr;
        t = _t;
    }

    void insert(int k);
    void remove(int k);
    void displayLevelOrder();
};

// Constructor for BTreeNode
BTreeNode::BTreeNode(int t1, bool leaf1) {
    t = t1;
    leaf = leaf1;
    keys = new int[2 * t - 1];
    C = new BTreeNode *[2 * t];
    n = 0;
}

// Level-order traversal
void BTreeNode::traverseLevelOrder() {
    queue<BTreeNode *> q;
    q.push(this);

    while (!q.empty()) {
        BTreeNode *node = q.front();
        q.pop();

        cout << "[ ";
        for (int i = 0; i < node->n; i++) {
            cout << node->keys[i] << " ";
        }
        cout << "] ";

        if (!node->leaf) {
            for (int i = 0; i <= node->n; i++) {
                q.push(node->C[i]);
            }
        }
    }
}

// Insert function
void BTree::insert(int k) {
    if (!root) {
        root = new BTreeNode(t, true);
        root->keys[0] = k;
        root->n = 1;
    } else {
        if (root->n == 2 * t - 1) {
            BTreeNode *s = new BTreeNode(t, false);
            s->C[0] = root;
            s->splitChild(0, root);
            int i = (s->keys[0] < k) ? 1 : 0;
            s->C[i]->insertNonFull(k);
            root = s;
        } else {
            root->insertNonFull(k);
        }
    }
}

// Insert non-full node
void BTreeNode::insertNonFull(int k) {
    int i = n - 1;
    if (leaf) {
        while (i >= 0 && keys[i] > k) {
            keys[i + 1] = keys[i];
            i--;
        }
        keys[i + 1] = k;
        n++;
    } else {
        while (i >= 0 && keys[i] > k) {
            i--;
        }
        if (C[i + 1]->n == 2 * t - 1) {
            splitChild(i + 1, C[i + 1]);
            if (keys[i + 1] < k) {
                i++;
            }
        }
        C[i + 1]->insertNonFull(k);
    }
}

// Split child node
void BTreeNode::splitChild(int i, BTreeNode *y) {
    BTreeNode *z = new BTreeNode(y->t, y->leaf);
    z->n = t - 1;

    for (int j = 0; j < t - 1; j++) {
        z->keys[j] = y->keys[j + t];
    }
    if (!y->leaf) {
        for (int j = 0; j < t; j++) {
            z->C[j] = y->C[j + t];
        }
    }
    y->n = t - 1;

    for (int j = n; j >= i + 1; j--) {
        C[j + 1] = C[j];
    }
    C[i + 1] = z;

    for (int j = n - 1; j >= i; j--) {
        keys[j + 1] = keys[j];
    }
    keys[i] = y->keys[t - 1];
    n++;
}

// Remove function
void BTree::remove(int k) {
    if (!root) {
        cout << "Tree is empty\n";
        return;
    }
    root->remove(k);
    if (root->n == 0) {
        BTreeNode *tmp = root;
        root = root->leaf ? nullptr : root->C[0];
        delete tmp;
    }
}

// Remove key from node
void BTreeNode::remove(int k) {
    int idx = findKey(k);

    if (idx < n && keys[idx] == k) {
        if (leaf) {
            removeFromLeaf(idx);
        } else {
            removeFromNonLeaf(idx);
        }
    } else {
        if (leaf) {
            cout << "Key " << k << " not found\n";
            return;
        }
        C[idx]->remove(k);
    }
}

// Remove key from leaf
void BTreeNode::removeFromLeaf(int idx) {
    for (int i = idx + 1; i < n; i++) {
        keys[i - 1] = keys[i];
    }
    n--;
}

// Remove key from non-leaf
void BTreeNode::removeFromNonLeaf(int idx) {
    int k = keys[idx];
    if (C[idx]->n >= t) {
        int pred = getPred(idx);
        keys[idx] = pred;
        C[idx]->remove(pred);
    } else if (C[idx + 1]->n >= t) {
        int succ = getSucc(idx);
        keys[idx] = succ;
        C[idx + 1]->remove(succ);
    } else {
        merge(idx);
        C[idx]->remove(k);
    }
}

// Get predecessor
int BTreeNode::getPred(int idx) {
    BTreeNode *cur = C[idx];
    while (!cur->leaf) {
        cur = cur->C[cur->n];
    }
    return cur->keys[cur->n - 1];
}

// Get successor
int BTreeNode::getSucc(int idx) {
    BTreeNode *cur = C[idx + 1];
    while (!cur->leaf) {
        cur = cur->C[0];
    }
    return cur->keys[0];
}

// Display level order
void BTree::displayLevelOrder() {
    if (root) {
        root->traverseLevelOrder();
        cout << endl;
    }
}

// Main menu
int main() {
    int degree, choice, value;
    cout << "Enter minimum degree (t) of B-tree: ";
    cin >> degree;
    BTree t(degree);

    while (true) {
        cout << "\n1. Insert\n2. Delete\n3. Display (Level Order)\n4. Exit\nEnter choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter value to insert: ";
                cin >> value;
                t.insert(value);
                break;
            case 2:
                cout << "Enter value to delete: ";
                cin >> value;
                t.remove(value);
                break;
            case 3:
                t.displayLevelOrder();
                break;
            case 4:
                return 0;
            default:
                cout << "Invalid choice\n";
        }
    }
}