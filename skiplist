#include <iostream>
#include <cstdlib>
#include <ctime>
using namespace std;

const float PROBABILITY = 0.5;
const int MAX_LEVEL = 4;

class Node {
public:
    int value;   // Stores the value at the node
    Node **forward;  // Array of pointers for levels

    Node(int val, int level) {
        value = val;
        forward = new Node*[level + 1];
        for (int i = 0; i <= level; i++) {
            forward[i] = nullptr;
        }
    }
};

class SkipList {
private:
    Node *header;   // Points to the start of the skip list
    int currentLevel;

    int randomLevel() {
        int level = 0;
        while ((double)rand() / RAND_MAX < PROBABILITY && level < MAX_LEVEL - 1) {
            level++;
        }
        return level;
    }

public:
    SkipList() {
        header = new Node(-1, MAX_LEVEL);
        currentLevel = 0;
        srand(time(0));  // Initialize random seed
    }

    void insert(int value) {
        Node *current = header;
        Node *update[MAX_LEVEL];
        for (int i = currentLevel; i >= 0; i--) {
            while (current->forward[i] && current->forward[i]->value < value) {
                current = current->forward[i];
            }
            update[i] = current;
        }
        current = current->forward[0];
        if (!current || current->value != value) {
            int newLevel = randomLevel();
            if (newLevel > currentLevel) {
                for (int i = currentLevel + 1; i <= newLevel; i++) {
                    update[i] = header;
                }
                currentLevel = newLevel;
            }
            Node *newNode = new Node(value, newLevel);
            for (int i = 0; i <= newLevel; i++) {
                newNode->forward[i] = update[i]->forward[i];
                update[i]->forward[i] = newNode;
            }
            cout << "Inserted: " << value << endl;
        }
    }

    void display() {
        cout << "\nSkip List: " << endl;
        for (int i = 0; i <= currentLevel; i++) {
            Node *node = header->forward[i];
            cout << "Level " << i << ": ";
            while (node) {
                cout << node->value << " ";
                node = node->forward[i];
            }
            cout << endl;
        }
    }

    void search(int value) {
        Node *current = header;
        for (int i = currentLevel; i >= 0; i--) {
            while (current->forward[i] && current->forward[i]->value < value) {
                current = current->forward[i];
            }
        }
        current = current->forward[0];
        if (current && current->value == value) {
            cout << "Found: " << value << endl;
        } else {
            cout << "Not Found: " << value << endl;
        }
    }

    void remove(int value) {
        Node *current = header;
        Node *update[MAX_LEVEL];
        for (int i = currentLevel; i >= 0; i--) {
            while (current->forward[i] && current->forward[i]->value < value) {
                current = current->forward[i];
            }
            update[i] = current;
        }
        current = current->forward[0];
        if (current && current->value == value) {
            for (int i = 0; i <= currentLevel; i++) {
                if (update[i]->forward[i] != current) {
                    break;
                }
                update[i]->forward[i] = current->forward[i];
            }
            delete current;
            while (currentLevel > 0 && header->forward[currentLevel] == nullptr) {
                currentLevel--;
            }
            cout << "Deleted: " << value << endl;
        } else {
            cout << "Not Found for Deletion: " << value << endl;
        }
    }
};

int main() {
    SkipList skipList;
    int n, value;

    // Insert elements
    cout << "Enter the number of elements to insert: ";
    cin >> n;
    cout << "Enter " << n << " elements: " << endl;
    for (int i = 0; i < n; i++) {
        cin >> value;
        skipList.insert(value);
    }

    // Display Skip List
    skipList.display();

    // Search for elements
    int searchCount;
    cout << "\nEnter the number of elements to search: ";
    cin >> searchCount;
    for (int i = 0; i < searchCount; i++) {
        cout << "Enter element to search: ";
        cin >> value;
        skipList.search(value);
    }

    // Delete elements
    int deleteCount;
    cout << "\nEnter the number of elements to delete: ";
    cin >> deleteCount;
    for (int i = 0; i < deleteCount; i++) {
        cout << "Enter element to delete: ";
        cin >> value;
        skipList.remove(value);
    }

    // Display Final Skip List
    cout << "\nFinal Skip List after deletions:" << endl;
    skipList.display();

    return 0;
}
